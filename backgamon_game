#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug  4 15:56:21 2020

@author: Myrto
"""

#Run this to play a game of Backgamon

import numpy as np

def inital_board():
#   sets up the game 
#    white = positve, black = negative
    board = np.zeros(29, dtype = int)
    board[1] = -2
    board[12] = -5
    board[17] = -3
    board[19] = -5
    board[6] = 5
    board[8] = 3
    board[13] = 5
    board[24] = 2
    return board


def roll_dice():
#    rolls the dice, returns two random numbers between 1,6
    dice = np.random.randint(1,7,2)
    return dice 

def game_over(board):
#    determines if either player has won
    return board[27] == 15 or board[28] == -15

def display_board(board):
#    converts the board from an array to a string 
    string = str(np.array2string(board[1:13])+'\n'+
                 np.array2string(board[24:12:-1])+'\n'+
                 np.array2string(board[25:29]))
    print("board: \n", string)
    
def check_for_error(board):
#    checks for any errors in the board
    error_in_board = False 
    
    if sum(board[board>0]) != 15 or sum(board[board<0]) != 15:
#        checks correct number of white and black counters
        error_in_board = True 
        print('There are too many or too few pieces on the board')
    
    return error_in_board

def legal_move(board, die, player):
#    finds posible moves for a player
#    imputs are the current board, dice roll and player
#    outputs all posible moves
    
    possible_moves = []
    
#    first check white player
    if player == 1:
        
#        first check if there are pieces to be brought back on
        if board[25] > 0:
            start_pip = 25 - die
            if board[start_pip] > -2:
                possible_moves.append(np.array[25, start_pip])
        
#        no pieces to be brought back
        else:
#           bearing off pieces if posible 
            if sum(board[7:25]>0) == 0:
                if (board[die] > 0):
                    possible_moves.append(np.array([die, 27]))
                
#            checks if a player has won
            elif not game_over(board):
#                is everyone past the throw
                s = np.max(np.where(board[1:7]>0)[0]+1)
                if s<die:
                    possible_moves.append(np.array([s,27]))
            
#            starting positions of all white pieces 
            possible_start_pips = np.where(board[0:25]>0)[0]

#            find all other legal moves
            for s in possible_start_pips:
                end_pip = s - die
                if end_pip > 0:
                    if board[end_pip] > -2:
                        possible_moves.append(np.array([s, end_pip]))
    
#    next check black player                    
    elif player == -1:
        
 #        first check if there are pieces to be brought back on
        if board[26] < 0:
            start_pip = die
            if board[start_pip] < 2:
                possible_moves.append(np.array[26, start_pip])   
                
#        no pieces to be brought back
        else:
#           bearing off pieces if posible 
            if sum(board[1:19]<0) == 0:
                if (board[25 - die] < 0):
                    possible_moves.append(np.array([25-die, 28]))
                
#            checks if a player has won
            elif not game_over(board):
#                is everyone past the throw
                s = np.min(np.where(board[19:25]<0)[0])
                if (6-s)<die:
                    possible_moves.append(np.array([19+s,28]))
            
#            starting positions of all black pieces 
            possible_start_pips = np.where(board[0:25]<0)[0]

#            find all other legal moves
            for s in possible_start_pips:
                end_pip = s + die
                if end_pip < 25:
                    if board[end_pip] < 22:
                        possible_moves.append(np.array([s,end_pip]))
        
    
    return possible_moves

def update_board(board, move, player):
    # updates the board
    # inputs are some board, one move and the player
    # outputs the updated board
    board_to_update = np.copy(board) 

    # if the move is there
    if len(move) > 0:
        startPip = move[0]
        endPip = move[1]
        
        # moving the dead piece if the move kills a piece
        kill = board_to_update[endPip]==(-1*player)
        if kill:
            board_to_update[endPip] = 0
            jail = 25+(player==1)
            board_to_update[jail] = board_to_update[jail] - player
        
        board_to_update[startPip] = board_to_update[startPip]-1*player
        board_to_update[endPip] = board_to_update[endPip]+player
        
    return board_to_update

def legal_moves(board, dice, player):
#    find all posible moves and game states after
#    inputs are board, dice throw and player
#    output is posible pairs of moves
    
    moves = []
    boards = []
    
#    use the first dice then the second
    possible_first_moves = legal_move(board, dice[0], player)
    for m1 in possible_first_moves:
        temp_board = update_board(board, m1, player)
        psoible_second_moves = legal_move(temp_board, dice[1], player)
        for m2 in psoible_second_moves:
            moves.append(np.array([m1,m2]))
            boards.append(update_board(temp_board, m2, player))
            
#    try using the second roll then the first
    if dice[0] != dice[1]:
        possible_first_moves = legal_move(board, dice[1], player)
        for m1 in possible_first_moves: 
            temp_board = update_board(board,m1,player)
            possible_second_moves = legal_move(board, dice[0], player)
            for m2 in possible_second_moves:
                moves.append(np.array([m1,m2]))
                boards.append(update_board(temp_board, m2, player))
                
#    if no paris of moves, then use just one dice
    if len(moves) == 0:

#        first dice
        possible_first_moves = legal_move(board, dice[0], player)
        for m in possible_first_moves:
            moves.append(np.array([m]))
            boards.append(update_board(board,m,player))
            
#        second dice
        possible_second_moves = legal_move(board, dice[1], player)
        for m in possible_second_moves:
            moves.append(np.array([m]))
            board.append(update_board(board, m, player))
        return moves, boards
    
board = inital_board()
print(legal_moves(board,[0,0], player = 1))
        
        
            
    



